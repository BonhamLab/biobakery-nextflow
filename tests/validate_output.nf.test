import java.nio.file.Path
import java.nio.file.Paths
import java.nio.file.Files
import java.util.stream.Collectors

def verify_outputs = { Path outDir, List<String> expectedFiles, boolean strict = false ->
  outDir = outDir.toAbsolutePath().normalize()
  assert Files.exists(outDir) : "Output dir not found: ${outDir}"

  def missing = []
  def empty   = []

  expectedFiles.each { rel ->
    Path p = outDir.resolve(rel)
    if (!Files.exists(p))            missing << rel
    else if (Files.isRegularFile(p) && Files.size(p) == 0L) empty << rel
  }

  assert missing.isEmpty() : "Missing outputs in ${outDir}: ${missing}"
  assert empty.isEmpty()   : "Empty outputs in ${outDir}:   ${empty}"

  if (strict) {
    def actual = Files.list(outDir)
      .filter { Files.isRegularFile(it) }
      .map    { it.fileName.toString() }
      .collect(Collectors.toList())
    def extra = (actual as Set) - (expectedFiles as Set)
    assert extra.isEmpty() : "Unexpected extra outputs in ${outDir}: ${extra}"
  }
}
// -----------------------------------------------------------------------

nextflow_pipeline {
  name "Validate output files main.nf"
  script "main.nf"

  test("Validate correct artifacts were created for single-end pipeline") {
    when {
      params { load("single-end-params.yaml") }
    }
    then {
      // --- Kneaddata ---
      def single_end_kneaddata_outDir = Paths.get("${baseDir}/test/single_end_rawfastq/output/kneaddata")
      def single_end_kneaddata_expected = [
        "FG00004_S26_R1_kneaddata.fastq.gz",                            
        "FG00004_S26_R1_kneaddata.repeats.removed.fastq.gz",
        "FG00004_S26_R1_kneaddata_hg37dec_v0.1_bowtie2_contam.fastq.gz", 
        "FG00004_S26_R1_kneaddata.trimmed.fastq.gz",
        "FG00004_S26_R1_kneaddata.log"
        ]

      verify_outputs(single_end_kneaddata_outDir, single_end_kneaddata_expected, true)

      // --- MetaPhlAn ---
      def single_end_metaphlan_outDir = Paths.get("${baseDir}/test/single_end_rawfastq/output/metaphlan/mpa_vOct22_CHOCOPhlAnSGB_202403")
      def single_end_metaphlan_expected = [
        "FG00004_S26_R1_bowtie2_mpa_vOct22_CHOCOPhlAnSGB_202403.tsv",  
        "FG00004_S26_R1_profile_mpa_vOct22_CHOCOPhlAnSGB_202403.tsv",
        "FG00004_S26_R1_mpa_vOct22_CHOCOPhlAnSGB_202403.sam"
      ]
      verify_outputs(single_end_metaphlan_outDir, single_end_metaphlan_expected, true)

      // --- HUMAnN ---
      def single_end_humann_outDir = Paths.get("${baseDir}/test/single_end_rawfastq/output/humann/humann_v4a")
      def single_end_humann_expected = [
        "FG00004_S26_R1_0_humann_v4a.log",
        "FG00004_S26_R1_3_reactions_humann_v4a.tsv",  
        "FG00004_S26_R1_2_genefamilies_humann_v4a.tsv",  
        "FG00004_S26_R1_4_pathabundance_humann_v4a.tsv"
      ]
      verify_outputs(single_end_humann_outDir, single_end_humann_expected, true)
    }
  }

   test("Validate correct artifacts were created for paired-end pipeline") {
    when {
      params { load("tuftshpc-params.yaml") }
    }
    then {
      // --- Kneaddata ---
      def paired_end_kneaddata_outDir = Paths.get("${baseDir}/test/output/kneaddata")
      def paired_end_kneaddata_expected = [
        "FG00004_S26_kneaddata.log",
        "FG00004_S26_kneaddata_unmatched_1.fastq.gz",
        "FG00004_S26_kneaddata_paired_1.fastq.gz",
        "FG00004_S26_kneaddata_unmatched_2.fastq.gz",
        "FG00004_S26_kneaddata_paired_2.fastq.gz"
      ]
      verify_outputs(paired_end_kneaddata_outDir, paired_end_kneaddata_expected, true)

      // --- MetaPhlAn ---
      def paired_end_metaphlan_outDir = Paths.get("${baseDir}/test/output/metaphlan/mpa_vOct22_CHOCOPhlAnSGB_202403")
      def paired_end_metaphlan_expected = [
        "FG00004_S26_bowtie2_mpa_vOct22_CHOCOPhlAnSGB_202403.tsv",
        "FG00004_S26_mpa_vOct22_CHOCOPhlAnSGB_202403.sam",
        "FG00004_S26_profile_mpa_vOct22_CHOCOPhlAnSGB_202403.tsv"
      ]
      verify_outputs(paired_end_metaphlan_outDir, paired_end_metaphlan_expected, true)

      // --- HUMAnN ---
      def paired_end_humann_outDir = Paths.get("${baseDir}/test/output/humann/humann_v4a")
      def paired_end_humann_expected = [
        "FG00004_S26_0_humann_v4a.log",  
        "FG00004_S26_2_genefamilies_humann_v4a.tsv",  
        "FG00004_S26_3_reactions_humann_v4a.tsv",  
        "FG00004_S26_4_pathabundance_humann_v4a.tsv"
      ]
      verify_outputs(paired_end_humann_outDir, paired_end_humann_expected, true)
    }
  } 
}